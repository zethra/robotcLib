#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, dgtl1,  ,               sensorTouch)
#pragma config(Sensor, dgtl2,  armLimit,       sensorTouch)
#pragma config(Sensor, dgtl3,  sonar,          sensorSONAR_cm)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           leftMotor,     tmotorVex393_HBridge, openLoop, encoderPort, I2C_1)
#pragma config(Motor,  port2,           armMotor,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          rightMotor,    tmotorVex393_HBridge, openLoop, reversed, encoderPort, I2C_2)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "drive.h"

bool driveState = false;
bool pressed = false;
int X = 0, Y = 0, L = 0, R = 0, threshold = 15;

void auton() {
	if(vexRT[Btn7D] == 1 && !pressed) {
			driveState = !driveState;
			writeDebugStreamLine("Switching");
			pressed = true;
		} else if (vexRT[Btn7D] == 0 && pressed) {
			pressed =false;
		}
		if(driveState) {
			if(abs(vexRT[Ch3]) > threshold)
				Y = vexRT[Ch3];
			else
				Y = 0;
			if(abs(vexRT[Ch4]) > threshold)
				X = vexRT[Ch4];
			else
				X = 0;
			motor[leftMotor] = Y + X;
			motor[rightMotor] = Y - X;
			writeDebugStreamLine("Joystick");
		} else {
			if(abs(vexRT[Ch3]) > threshold)
				L = vexRT[Ch3];
			else
				L = 0;
			if(abs(vexRT[Ch2]) > threshold)
				R = vexRT[Ch2];
			else
				R = 0;
			if(L > 0 && R > 0 || L < 0 && R < 0) {
				motor[leftMotor] = L;
				motor[rightMotor] = R;
			} else {
				motor[leftMotor] = L * 0.6;
				motor[rightMotor] = R * 0.6;
			}
			writeDebugStreamLine("Tank");
		}
		if(vexRT[Btn6U] == 1) {
			motor[armMotor] = 25;
		} else if(vexRT[Btn6D] == 1 && SensorValue(armLimit) == 0) {
			motor[armMotor] = -15;
		} else {
			motor[armMotor] = 0;
		}
}

void postAuton() {
	motor[leftMotor] = 0;
	motor[rightMotor] = 0;
	motor[armMotor] = 0;
}

void teleop() {

}

void postTeleop() {
	motor[leftMotor] = 0;
	motor[rightMotor] = 0;
	motor[armMotor] = 0;
}


//Do not edit code bellow this point!
#include "twoStage.h"
task main() {
	//twoStage();
	//writeDebugStreamLine("Staringing");
	while(true) {
		if(SensorValue(sonar) > 14 || SensorValue(sonar) < 0) {
			motor[leftMotor] = 50;
			motor[rightMotor] = 50;
		} else {
			motor[leftMotor] = 0;
			motor[rightMotor] = 0;
			break;
		}
	}
	motor[armMotor] = 25;
	wait10Msec(50);
	motor[armMotor] = 0;
	while(SensorValue(dgtl1) == 0) {
		motor[leftMotor] = -50;
		motor[rightMotor] = -50;
	}
	motor[leftMotor] = 0;
	motor[rightMotor] = 0;
}
